LIBRARY ieee;
	USE ieee.std_logic_1164.ALL;
	USE ieee.numeric_std.ALL;

entity ram IS
	generic (
		ADDRESS_WIDTH	: integer := 8;
		DATA_WIDTH	: integer := 32
		);
	port(
		clk : in std_logic; --se;al de reloj
		rst : in std_logic; --se;al de reset
		en : in std_logic; --se;al de enable de la memoria
		wr : in std_logic; --se;al de enable de escritura
		rd : in std_logic; --se;al de enable de lectura
		Din : in std_logic_vector (DATA_WIDTH - 1 downto 0); --entrada de datos
		addr : in std_logic_vector (ADDRESS_WIDTH - 1 downto 0); --entrada de direccion
		dout : out std_logic_vector (DATA_WIDTH - 1 downto 0) --salida de datos
		);
end ram;

architecture rtl of ram is

	type RAM is array(0 to 2 ** ADDRESS_WIDTH - 1) of std_logic_vector(DATA_WIDTH - 1 downto 0);

	signal ram_block : RAM;
	
	
begin
	
	process (clk, rst)
	begin
		if rst = '1' then
			ram_block <= (others => (others => '0'));
		elsif clk'event AND clk = '1' then
			if en = '1' then
				if wr = '1' then
					ram_block(to_integer(unsigned(addr))) <= Din;
				end if;
				if rd = '1' then
					dout <= ram_block(to_integer(unsigned(addr)));
				end if;
			else
				ram_block <= (others => (others => '0'));
			end if;
		end if;
				
	end process;
end rtl;