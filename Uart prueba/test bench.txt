LIBRARY ieee;
	USE ieee.std_logic_1164.ALL;
 
ENTITY TEST_UART IS
END TEST_UART;
 
ARCHITECTURE behavior OF TEST_UART IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT UART_TOP
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         new_word_rx : OUT  std_logic;
         word_rx : OUT  std_logic_vector(7 downto 0);
         busy_rx : OUT  std_logic;
         new_word_tx : IN  std_logic;
         word_tx : IN  std_logic_vector(7 downto 0);
         busy_tx : OUT  std_logic;
         parity_rx : OUT  std_logic;
         rx : IN  std_logic;
         tx : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';
   signal new_word_tx : std_logic := '0';
   signal word_tx : std_logic_vector(7 downto 0) := (others => '0');
   signal rx : std_logic := '0';

 	--Outputs
   signal new_word_rx : std_logic;
   signal word_rx : std_logic_vector(7 downto 0);
   signal busy_rx : std_logic;
   signal busy_tx : std_logic;
   signal parity_rx : std_logic;
   signal tx : std_logic;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: UART_TOP PORT MAP (
          clk => clk,
          rst => rst,
          new_word_rx => new_word_rx,
          word_rx => word_rx,
          busy_rx => busy_rx,
          new_word_tx => new_word_tx,
          word_tx => word_tx,
          busy_tx => busy_tx,
          parity_rx => parity_rx,
          rx => rx,
          tx => tx
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
		rst <= '0';
		rx <= '1';
		word_tx <= "00100001";
		new_word_tx <= '0';
		wait for 100 ns;
		new_word_tx <= '1';
		wait for 10 ns;
		new_word_tx <= '0';
		
      wait for 100 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '1';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '1';
		
		
		wait for 30000 ns;	
		
		wait for 20000 ns;	
		new_word_tx <= '0';
		wait for 100 ns;
		new_word_tx <= '1';
		wait for 10 ns;
		new_word_tx <= '0';
		
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '0';
		wait for 70 ns;
		rx <= '1';

      wait for clk_period*10;

      -- insert stimulus here 

      wait;
   end process;
END;
